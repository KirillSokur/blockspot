"""
columns and relationships of "cities"
"""
type cities {
  """An object relationship"""
  country: countries!
  country_id: uuid!
  created_at: timestamptz!
  google_id: String!
  id: uuid!
  latitude: Float!
  longitude: Float!
  name: String!
  nb_places: Int!

  """An array relationship"""
  places(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): [places!]!

  """An aggregated array relationship"""
  places_aggregate(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): places_aggregate!
  slug: String!
  unsplash_id: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "cities"
"""
type cities_aggregate {
  aggregate: cities_aggregate_fields
  nodes: [cities!]!
}

"""
aggregate fields of "cities"
"""
type cities_aggregate_fields {
  avg: cities_avg_fields
  count: Int
  max: cities_max_fields
  min: cities_min_fields
  sum: cities_sum_fields
}

"""
input type for inserting array relation for remote table "cities"
"""
input cities_arr_rel_insert_input {
  data: [cities_insert_input!]!
  on_conflict: cities_on_conflict
}

"""aggregate avg on columns"""
type cities_avg_fields {
  latitude: Float
  longitude: Float
  nb_places: Float
}

"""
Boolean expression to filter rows from the table "cities". All fields are combined with a logical 'AND'.
"""
input cities_bool_exp {
  _and: [cities_bool_exp]
  _not: cities_bool_exp
  _or: [cities_bool_exp]
  country: countries_bool_exp
  country_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  google_id: varchar_comparison_exp
  id: uuid_comparison_exp
  latitude: real_comparison_exp
  longitude: real_comparison_exp
  name: varchar_comparison_exp
  nb_places: integer_comparison_exp
  places: places_bool_exp
  slug: varchar_comparison_exp
  unsplash_id: varchar_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
columns of table "cities"
"""
enum cities_column {
  """column name"""
  country_id

  """column name"""
  created_at

  """column name"""
  google_id

  """column name"""
  id

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  nb_places

  """column name"""
  slug

  """column name"""
  unsplash_id

  """column name"""
  updated_at
}

"""
unique or primary key constraints on table "cities"
"""
enum cities_constraint {
  """unique or primary key constraint"""
  cities_pkey
}

"""
input type for incrementing integer columne in table "cities"
"""
input cities_inc_input {
  nb_places: Int
}

"""
input type for inserting data into table "cities"
"""
input cities_insert_input {
  country: countries_obj_rel_insert_input
  country_id: uuid
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  nb_places: Int
  places: places_arr_rel_insert_input
  slug: String
  unsplash_id: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type cities_max_fields {
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  nb_places: Int
  slug: String
  unsplash_id: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type cities_min_fields {
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  nb_places: Int
  slug: String
  unsplash_id: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "cities"
"""
type cities_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [cities!]!
}

"""
input type for inserting object relation for remote table "cities"
"""
input cities_obj_rel_insert_input {
  data: cities_insert_input!
  on_conflict: cities_on_conflict
}

"""
on conflict condition type for table "cities"
"""
input cities_on_conflict {
  """action when conflict occurs (deprecated)"""
  action: conflict_action
  constraint: cities_constraint!
  update_columns: [cities_column!]
}

"""
ordering options when selecting data from "cities"
"""
input cities_order_by {
  country: countries_order_by
  country_id: order_by
  created_at: order_by
  google_id: order_by
  id: order_by
  latitude: order_by
  longitude: order_by
  name: order_by
  nb_places: order_by
  slug: order_by
  unsplash_id: order_by
  updated_at: order_by
}

"""
input type for updating data in table "cities"
"""
input cities_set_input {
  country_id: uuid
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  nb_places: Int
  slug: String
  unsplash_id: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type cities_sum_fields {
  latitude: Float
  longitude: Float
  nb_places: Int
}

"""conflict action"""
enum conflict_action {
  """ignore the insert on this row"""
  ignore

  """update the row with the given values"""
  update
}

"""
columns and relationships of "countries"
"""
type countries {
  """An array relationship"""
  cities(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cities_order_by!]

    """filter the rows returned"""
    where: cities_bool_exp
  ): [cities!]!

  """An aggregated array relationship"""
  cities_aggregate(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cities_order_by!]

    """filter the rows returned"""
    where: cities_bool_exp
  ): cities_aggregate!
  created_at: timestamptz!
  google_id: String!
  id: uuid!
  latitude: Float!
  longitude: Float!
  name: String!
  slug: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "countries"
"""
type countries_aggregate {
  aggregate: countries_aggregate_fields
  nodes: [countries!]!
}

"""
aggregate fields of "countries"
"""
type countries_aggregate_fields {
  avg: countries_avg_fields
  count: Int
  max: countries_max_fields
  min: countries_min_fields
  sum: countries_sum_fields
}

"""
input type for inserting array relation for remote table "countries"
"""
input countries_arr_rel_insert_input {
  data: [countries_insert_input!]!
  on_conflict: countries_on_conflict
}

"""aggregate avg on columns"""
type countries_avg_fields {
  latitude: Float
  longitude: Float
}

"""
Boolean expression to filter rows from the table "countries". All fields are combined with a logical 'AND'.
"""
input countries_bool_exp {
  _and: [countries_bool_exp]
  _not: countries_bool_exp
  _or: [countries_bool_exp]
  cities: cities_bool_exp
  created_at: timestamptz_comparison_exp
  google_id: varchar_comparison_exp
  id: uuid_comparison_exp
  latitude: real_comparison_exp
  longitude: real_comparison_exp
  name: varchar_comparison_exp
  slug: varchar_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
columns of table "countries"
"""
enum countries_column {
  """column name"""
  created_at

  """column name"""
  google_id

  """column name"""
  id

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updated_at
}

"""
unique or primary key constraints on table "countries"
"""
enum countries_constraint {
  """unique or primary key constraint"""
  countries_pkey
}

"""
input type for inserting data into table "countries"
"""
input countries_insert_input {
  cities: cities_arr_rel_insert_input
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type countries_max_fields {
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type countries_min_fields {
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "countries"
"""
type countries_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [countries!]!
}

"""
input type for inserting object relation for remote table "countries"
"""
input countries_obj_rel_insert_input {
  data: countries_insert_input!
  on_conflict: countries_on_conflict
}

"""
on conflict condition type for table "countries"
"""
input countries_on_conflict {
  """action when conflict occurs (deprecated)"""
  action: conflict_action
  constraint: countries_constraint!
  update_columns: [countries_column!]
}

"""
ordering options when selecting data from "countries"
"""
input countries_order_by {
  created_at: order_by
  google_id: order_by
  id: order_by
  latitude: order_by
  longitude: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

"""
input type for updating data in table "countries"
"""
input countries_set_input {
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type countries_sum_fields {
  latitude: Float
  longitude: Float
}

input InputCreatePlace {
  cityId: String!
  googleId: String!
  recaptcha: String!
  category: String!
}

"""
expression to compare columns of type integer. All fields are combined with logical 'AND'.
"""
input integer_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

type Mutation {
  createPlace(input: InputCreatePlace!): places!
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the descending order, nulls last"""
  desc

  """in the ascending order, nulls first"""
  desc_nulls_first
}

"""
columns and relationships of "places"
"""
type places {
  address: String!
  category: String!

  """An object relationship"""
  city: cities!
  city_id: uuid!
  created_at: timestamptz!
  google_id: String!
  id: uuid!
  latitude: Float!
  longitude: Float!
  name: String!
  slug: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "places"
"""
type places_aggregate {
  aggregate: places_aggregate_fields
  nodes: [places!]!
}

"""
aggregate fields of "places"
"""
type places_aggregate_fields {
  avg: places_avg_fields
  count: Int
  max: places_max_fields
  min: places_min_fields
  sum: places_sum_fields
}

"""
input type for inserting array relation for remote table "places"
"""
input places_arr_rel_insert_input {
  data: [places_insert_input!]!
  on_conflict: places_on_conflict
}

"""aggregate avg on columns"""
type places_avg_fields {
  latitude: Float
  longitude: Float
}

"""
Boolean expression to filter rows from the table "places". All fields are combined with a logical 'AND'.
"""
input places_bool_exp {
  _and: [places_bool_exp]
  _not: places_bool_exp
  _or: [places_bool_exp]
  address: varchar_comparison_exp
  category: varchar_comparison_exp
  city: cities_bool_exp
  city_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  google_id: varchar_comparison_exp
  id: uuid_comparison_exp
  latitude: real_comparison_exp
  longitude: real_comparison_exp
  name: varchar_comparison_exp
  slug: varchar_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
columns of table "places"
"""
enum places_column {
  """column name"""
  address

  """column name"""
  category

  """column name"""
  city_id

  """column name"""
  created_at

  """column name"""
  google_id

  """column name"""
  id

  """column name"""
  latitude

  """column name"""
  longitude

  """column name"""
  name

  """column name"""
  slug

  """column name"""
  updated_at
}

"""
unique or primary key constraints on table "places"
"""
enum places_constraint {
  """unique or primary key constraint"""
  places_pkey
}

"""
input type for inserting data into table "places"
"""
input places_insert_input {
  address: String
  category: String
  city: cities_obj_rel_insert_input
  city_id: uuid
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type places_max_fields {
  address: String
  category: String
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type places_min_fields {
  address: String
  category: String
  created_at: timestamptz
  google_id: String
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "places"
"""
type places_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [places!]!
}

"""
input type for inserting object relation for remote table "places"
"""
input places_obj_rel_insert_input {
  data: places_insert_input!
  on_conflict: places_on_conflict
}

"""
on conflict condition type for table "places"
"""
input places_on_conflict {
  """action when conflict occurs (deprecated)"""
  action: conflict_action
  constraint: places_constraint!
  update_columns: [places_column!]
}

"""
ordering options when selecting data from "places"
"""
input places_order_by {
  address: order_by
  category: order_by
  city: cities_order_by
  city_id: order_by
  created_at: order_by
  google_id: order_by
  id: order_by
  latitude: order_by
  longitude: order_by
  name: order_by
  slug: order_by
  updated_at: order_by
}

"""
input type for updating data in table "places"
"""
input places_set_input {
  address: String
  category: String
  city_id: uuid
  created_at: timestamptz
  google_id: String
  id: uuid
  latitude: Float
  longitude: Float
  name: String
  slug: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type places_sum_fields {
  latitude: Float
  longitude: Float
}

type Query {
  """
  fetch data from the table: "cities"
  """
  cities(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cities_order_by!]

    """filter the rows returned"""
    where: cities_bool_exp
  ): [cities!]!

  """
  fetch aggregated fields from the table: "cities"
  """
  cities_aggregate(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [cities_order_by!]

    """filter the rows returned"""
    where: cities_bool_exp
  ): cities_aggregate!

  """fetch data from the table: "cities" using primary key columns"""
  cities_by_pk(id: uuid!): cities

  """
  fetch data from the table: "countries"
  """
  countries(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch aggregated fields from the table: "countries"
  """
  countries_aggregate(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): countries_aggregate!

  """fetch data from the table: "countries" using primary key columns"""
  countries_by_pk(id: uuid!): countries

  """
  fetch data from the table: "places"
  """
  places(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): [places!]!

  """
  fetch aggregated fields from the table: "places"
  """
  places_aggregate(
    """limit the nuber of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [places_order_by!]

    """filter the rows returned"""
    where: places_bool_exp
  ): places_aggregate!

  """fetch data from the table: "places" using primary key columns"""
  places_by_pk(id: uuid!): places
  _: Boolean
}

"""
expression to compare columns of type real. All fields are combined with logical 'AND'.
"""
input real_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float]
}

scalar timestamptz

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz]
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid]
}

"""
expression to compare columns of type varchar. All fields are combined with logical 'AND'.
"""
input varchar_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

